version: '3.8'

services:
  # Main HFT System
  hft-system:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: idyll-hft-system
    ports:
      - "3000:3000"    # Web interface
      - "3100:3100"    # Alternative web interface port 
      - "8080:8080"    # API endpoint
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - INFLUXDB_HOST=influxdb
      - INFLUXDB_PORT=8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN:-default-token}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-hft-org}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-hft-data}
    volumes:
      - hft_logs:/app/logs
      - hft_data:/app/data
      - hft_build:/app/build
    depends_on:
      - redis
      - mongodb
      - influxdb
    restart: unless-stopped
    networks:
      - hft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: hft-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - hft-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MongoDB for persistent data storage
  mongodb:
    image: mongo:6
    container_name: hft-mongodb
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-hft-secure-pass}
      MONGO_INITDB_DATABASE: hft_db
    volumes:
      - mongodb_data:/data/db
      - ./config/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    networks:
      - hft-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.admin.runCommand('ismaster')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB for time-series data
  influxdb:
    image: influxdb:2.7-alpine
    container_name: hft-influxdb
    ports:
      - "8087:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD:-hft-secure-pass}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG:-hft-org}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET:-hft-data}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN:-default-token}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    restart: unless-stopped
    networks:
      - hft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for monitoring and visualization
  grafana:
    image: grafana/grafana:latest
    container_name: hft-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-hft-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - influxdb
    restart: unless-stopped
    networks:
      - hft-network

  # Nginx reverse proxy for load balancing
  nginx:
    image: nginx:alpine
    container_name: hft-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - hft-system
    restart: unless-stopped
    networks:
      - hft-network

volumes:
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  grafana_data:
    driver: local
  hft_logs:
    driver: local
  hft_data:
    driver: local
  hft_build:
    driver: local

networks:
  hft-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
